// <auto-generated />
using ARID.Data;
using ARID.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ARID.Migrations
{
    [DbContext(typeof(ARIDDbContext))]
    [Migration("20200315110555_new5")]
    partial class new5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ARID.DTOs.ApplicationUserDTO", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ARID");

                    b.Property<string>("ArName");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("EnName");

                    b.Property<string>("Faculty");

                    b.Property<string>("University");

                    b.Property<int>("Visitors");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUserDTO");
                });

            modelBuilder.Entity("ARID.Messages.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attachment")
                        .HasMaxLength(50);

                    b.Property<string>("Content")
                        .HasMaxLength(5000);

                    b.Property<DateTime>("DateOfRead");

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<string>("FromApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRead");

                    b.Property<bool>("IsReported");

                    b.Property<DateTime>("LastActivitydate");

                    b.Property<string>("Subject")
                        .HasMaxLength(200);

                    b.Property<string>("ToApplicationUserId")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("FromApplicationUserId");

                    b.HasIndex("ToApplicationUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ARID.Models.AcademicActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActivityDate");

                    b.Property<int>("ActivityType");

                    b.Property<string>("ActivityURL")
                        .HasMaxLength(500);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ArDescription")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ArTitle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("CountryId");

                    b.Property<string>("EnDescription")
                        .HasMaxLength(500);

                    b.Property<string>("EnTitle")
                        .HasMaxLength(500);

                    b.Property<int>("Language");

                    b.Property<string>("Photo")
                        .HasMaxLength(500);

                    b.Property<int>("RelationType");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CountryId");

                    b.ToTable("AcademicActivities");
                });

            modelBuilder.Entity("ARID.Models.AcademicDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArDegreeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EnDegreeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Indx");

                    b.HasKey("Id");

                    b.ToTable("AcademicDegrees");
                });

            modelBuilder.Entity("ARID.Models.AcademicPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ArDescription")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("CityId");

                    b.Property<int>("CountryId");

                    b.Property<string>("EnDescription")
                        .HasMaxLength(200);

                    b.Property<int>("FacultyId");

                    b.Property<DateTime>("FromYear");

                    b.Property<int>("Indx");

                    b.Property<bool>("IsCurrent");

                    b.Property<int>("PositionTypeId");

                    b.Property<DateTime?>("ToYear");

                    b.Property<int>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("PositionTypeId");

                    b.HasIndex("UniversityId");

                    b.ToTable("AcademicPositions");
                });

            modelBuilder.Entity("ARID.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressSaveName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CityId");

                    b.Property<int>("CountryId");

                    b.Property<string>("EnName")
                        .HasMaxLength(50);

                    b.Property<int>("FacultyId");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15);

                    b.Property<int>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ARID.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ARID");

                    b.Property<DateTime?>("ARIDDate");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Balance");

                    b.Property<string>("CVURL")
                        .HasMaxLength(500);

                    b.Property<int>("CityId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("ContactMeDetail")
                        .HasMaxLength(500);

                    b.Property<int>("CountryId");

                    b.Property<string>("DAL")
                        .HasMaxLength(450);

                    b.Property<bool>("DALEnabled");

                    b.Property<DateTime>("DateofBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("EnName")
                        .HasMaxLength(50);

                    b.Property<int>("FacultyId");

                    b.Property<string>("FeaturedImage")
                        .HasMaxLength(500);

                    b.Property<string>("FirmName")
                        .HasMaxLength(100);

                    b.Property<int>("Gender");

                    b.Property<decimal>("HoldingBalance");

                    b.Property<bool>("IsFreelancer");

                    b.Property<bool>("IsNotUniversity");

                    b.Property<DateTime?>("LastLogin");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("OtherNames")
                        .HasMaxLength(300);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(500);

                    b.Property<string>("ReferredById")
                        .HasMaxLength(450);

                    b.Property<DateTime>("RegDate");

                    b.Property<string>("SecondEmail")
                        .HasMaxLength(100);

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("Status");

                    b.Property<string>("Summary")
                        .HasMaxLength(4000);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UILanguage")
                        .IsRequired();

                    b.Property<int>("UniversityId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("Visitors");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ReferredById");

                    b.HasIndex("UniversityId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ARID.Models.AreaEditor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("JoinDate");

                    b.Property<int>("JournalId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("JournalId");

                    b.ToTable("AreaEditors");
                });

            modelBuilder.Entity("ARID.Models.ArticleAuthorship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Contribution")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Indx");

                    b.Property<int>("ManuscriptId");

                    b.Property<int>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUserId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ManuscriptId");

                    b.HasIndex("UniversityId");

                    b.ToTable("ArticleAuthorships");
                });

            modelBuilder.Entity("ARID.Models.ArticleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ArticleTypes");
                });

            modelBuilder.Entity("ARID.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArBadgeDesc")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<string>("ArBadgeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("BadgeLogo")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("EmailContentId");

                    b.Property<string>("EnBadgeDesc")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("EnBadgeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsVisible");

                    b.HasKey("Id");

                    b.HasIndex("EmailContentId");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("ARID.Models.ChapterStudyStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("CourseChapterContentId");

                    b.Property<Guid?>("CourseChapterContentId1");

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CourseChapterContentId1");

                    b.ToTable("ChapterStudyStatuses");
                });

            modelBuilder.Entity("ARID.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArCityName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CountryId");

                    b.Property<string>("EnCityName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ARID.Models.CommentMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("PostCommentId");

                    b.Property<int>("ReportType");

                    b.Property<int>("VoteValue");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PostCommentId");

                    b.ToTable("CommentMetrics");
                });

            modelBuilder.Entity("ARID.Models.Committee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Image")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Committees");
                });

            modelBuilder.Entity("ARID.Models.CommitteeAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AchievementType");

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("CommitteeProfileId");

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CommitteeProfileId");

                    b.ToTable("CommitteeAchievements");
                });

            modelBuilder.Entity("ARID.Models.CommitteeProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("CommitteeId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCommitteeAdmin");

                    b.Property<DateTime>("JoinDate");

                    b.Property<string>("Task")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CommitteeId");

                    b.ToTable("CommitteeProfiles");
                });

            modelBuilder.Entity("ARID.Models.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("BgImage")
                        .HasMaxLength(100);

                    b.Property<int>("CommunityType");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsCommentsAllowed");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsSuspended");

                    b.Property<string>("Logo")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SecurityLevel");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SpecialityId");

                    b.Property<string>("Tags")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("ARID.Models.CommunityFollower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("CommunityId");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("NotifyMe");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CommunityId");

                    b.ToTable("CommunityFollowers");
                });

            modelBuilder.Entity("ARID.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArCountryName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10);

                    b.Property<string>("EnCountryName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Flag")
                        .HasMaxLength(50);

                    b.Property<string>("ShortName")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ARID.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessPassword")
                        .HasMaxLength(100);

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Certificate");

                    b.Property<decimal>("CertificateCost");

                    b.Property<decimal>("CourseFees");

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<string>("Effort")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("EndingDate");

                    b.Property<string>("FilePdf")
                        .HasMaxLength(250);

                    b.Property<string>("Flyer")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("ImportantDates")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("IntroductoryVideo")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAdminApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsPaid");

                    b.Property<bool>("IsPrerecorded");

                    b.Property<bool>("IsPrivate");

                    b.Property<bool>("IsReported");

                    b.Property<bool>("Ishidden");

                    b.Property<int>("Language");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("LearningOutcomes")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<int>("PassingMark");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<int>("SpecialityId");

                    b.Property<DateTime>("StartingDate");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("TargetStudents")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ARID.Models.CourseChapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseId");

                    b.Property<int>("Indx");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("Ishidden");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseChapters");
                });

            modelBuilder.Entity("ARID.Models.CourseChapterChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseChapterExamId");

                    b.Property<bool>("IsCorrectAnswer");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Mark");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CourseChapterExamId");

                    b.ToTable("CourseChapterChoices");
                });

            modelBuilder.Entity("ARID.Models.CourseChapterContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContentType");

                    b.Property<Guid>("CourseChapterId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Duration")
                        .HasMaxLength(50);

                    b.Property<string>("FilePath")
                        .HasMaxLength(100);

                    b.Property<int>("Indx");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDownloadable");

                    b.Property<bool>("IsFree");

                    b.Property<bool>("IsReported");

                    b.Property<bool>("Ishidden");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CourseChapterId");

                    b.ToTable("CourseChapterContents");
                });

            modelBuilder.Entity("ARID.Models.CourseChapterExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseChapterId");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Imgurl")
                        .HasMaxLength(100);

                    b.Property<int>("Indx");

                    b.Property<bool>("IsHidden");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("CourseChapterId");

                    b.ToTable("CourseChapterExams");
                });

            modelBuilder.Entity("ARID.Models.CourseChapterExamLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AnswerDate");

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<Guid>("CourseChapterChoiceId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CourseChapterChoiceId");

                    b.ToTable("ChapterExamLogs");
                });

            modelBuilder.Entity("ARID.Models.CourseInstructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("CourseId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Indx");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseInstructors");
                });

            modelBuilder.Entity("ARID.Models.CourseRegisteration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("CourseId");

                    b.Property<bool>("IsPassedExam");

                    b.Property<DateTime>("JoinDate");

                    b.Property<DateTime>("PassedDate");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseRegisterations");
                });

            modelBuilder.Entity("ARID.Models.CourseSponsor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseId");

                    b.Property<int>("Indx");

                    b.Property<string>("Link")
                        .HasMaxLength(500);

                    b.Property<string>("Logo")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseSponsors");
                });

            modelBuilder.Entity("ARID.Models.EducationalLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcademicDegreeId");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ArCertificateName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ArDescription")
                        .HasMaxLength(200);

                    b.Property<int>("CountryId");

                    b.Property<string>("EnCertificateName")
                        .HasMaxLength(100);

                    b.Property<string>("EnDescription")
                        .HasMaxLength(200);

                    b.Property<int>("FacultyId");

                    b.Property<DateTime>("FromYear");

                    b.Property<int>("Indx");

                    b.Property<bool>("IsCurrent");

                    b.Property<int>("SpecialityId");

                    b.Property<DateTime?>("ToYear");

                    b.Property<int>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("AcademicDegreeId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CountryId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("UniversityId");

                    b.ToTable("EducationalLevels");
                });

            modelBuilder.Entity("ARID.Models.EmailContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArContent")
                        .IsRequired();

                    b.Property<string>("ArSubject")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EnContent")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<string>("EnSubject")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SenderId");

                    b.Property<Guid>("UniqueName");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("EmailContents");
                });

            modelBuilder.Entity("ARID.Models.Expertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SpecialityId");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("UserId");

                    b.ToTable("Expertises");
                });

            modelBuilder.Entity("ARID.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArFacultyName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("CityId");

                    b.Property<string>("EnFacultyName")
                        .HasMaxLength(100);

                    b.Property<bool>("HasPostGraduation");

                    b.Property<bool>("IsIndexed");

                    b.Property<int>("SpecialityId");

                    b.Property<int>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("ARID.Models.FileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("FileTypes");
                });

            modelBuilder.Entity("ARID.Models.Filspay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("Status");

                    b.Property<decimal>("UserAmount");

                    b.Property<string>("trn_id")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Filspays");
                });

            modelBuilder.Entity("ARID.Models.Follow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FollowedUserId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("FollowedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("ARID.Models.FreelancerComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Commentary")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<string>("File")
                        .HasMaxLength(500);

                    b.Property<int>("FreelancerProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FreelancerProjectId");

                    b.ToTable("FreelancerComments");
                });

            modelBuilder.Entity("ARID.Models.FreelancerPortfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<DateTime>("DateOfAchievement");

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("ExternalLink")
                        .HasMaxLength(500);

                    b.Property<string>("File")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Likes");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("Views");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("FreelancerPortfolios");
                });

            modelBuilder.Entity("ARID.Models.FreelancerProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminNotification")
                        .HasMaxLength(1000);

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("BugetType");

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<int>("DaysRequired");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<string>("File")
                        .HasMaxLength(100);

                    b.Property<int>("FixedPrice");

                    b.Property<int>("FreelancerProjectStatus");

                    b.Property<Guid>("FreelancerReadyServiceId");

                    b.Property<bool>("HideProjectOwnerDetails");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("PurposeType");

                    b.Property<int>("RecruiterProjectType");

                    b.Property<int>("SkillCategoryType");

                    b.Property<string>("Skills")
                        .IsRequired();

                    b.Property<int>("SpecialityId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("FreelancerProjects");
                });

            modelBuilder.Entity("ARID.Models.FreelancerProposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("BidAmount");

                    b.Property<DateTime>("DateOfAssignment");

                    b.Property<DateTime>("DateofRecord");

                    b.Property<int>("DaysRequired");

                    b.Property<DateTime>("DeliveredDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<int>("FreelancerProjectId");

                    b.Property<bool>("IsAssigned");

                    b.Property<bool>("IsNameVisible");

                    b.Property<bool>("IsPrivate");

                    b.Property<bool>("IsReported");

                    b.Property<bool>("Isvisible");

                    b.Property<int>("ProposalStatus");

                    b.Property<string>("ReportedByUserId")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FreelancerProjectId");

                    b.HasIndex("ReportedByUserId");

                    b.ToTable("FreelancerProposals");
                });

            modelBuilder.Entity("ARID.Models.FreelancerRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("Communication");

                    b.Property<DateTime>("DateofRecord");

                    b.Property<int>("Delivery");

                    b.Property<int>("Experience");

                    b.Property<int>("FreelancerProjectId");

                    b.Property<Guid>("FreelancerReadyServiceId");

                    b.Property<bool>("Isvisible");

                    b.Property<int>("Professionalism");

                    b.Property<int>("Quality");

                    b.Property<int>("RehirePossibility");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FreelancerProjectId");

                    b.ToTable("FreelancerRatings");
                });

            modelBuilder.Entity("ARID.Models.FreelancerReadyService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PricingType");

                    b.Property<int>("RequiredDays");

                    b.Property<int>("SkillCategoryType");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Views");

                    b.Property<string>("Youtube")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("FreelancerReadyServices");
                });

            modelBuilder.Entity("ARID.Models.FreelancerReadyServiceExtension", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FreelancerReadyServiceId");

                    b.Property<int>("PricingType");

                    b.Property<int>("RequiredDays");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("FreelancerReadyServiceId");

                    b.ToTable("FreelancerReadyServiceExtensions");
                });

            modelBuilder.Entity("ARID.Models.FreelancerRecruiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<int>("FreelancerProjectId");

                    b.Property<int>("RecruiterStatus");

                    b.Property<string>("ReportToAdmin")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FreelancerProjectId");

                    b.ToTable("FreelancerRecruiters");
                });

            modelBuilder.Entity("ARID.Models.FreelancerSkillVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Certificates")
                        .HasMaxLength(100);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("ExternalLink")
                        .HasMaxLength(500);

                    b.Property<bool>("IsArabic");

                    b.Property<bool>("IsEnglish");

                    b.Property<bool>("IsVerified");

                    b.Property<DateTime>("SinceDate");

                    b.Property<int>("SkillId");

                    b.Property<string>("VerifiedByUserId")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SkillId");

                    b.HasIndex("VerifiedByUserId");

                    b.ToTable("FreelancerSkillVerifications");
                });

            modelBuilder.Entity("ARID.Models.Gallary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("OriginalImage")
                        .HasMaxLength(500);

                    b.Property<string>("ThumbImage")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Gallaries");
                });

            modelBuilder.Entity("ARID.Models.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActivationDate");

                    b.Property<string>("ArDescription")
                        .HasMaxLength(5000);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("AuthorCertificateBackgroundFile")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(450);

                    b.Property<string>("EISSN")
                        .HasMaxLength(10);

                    b.Property<string>("EiCId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("EnDescription")
                        .HasMaxLength(5000);

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("JournalHeader")
                        .HasMaxLength(100);

                    b.Property<int>("JournalStatus");

                    b.Property<string>("Logo")
                        .HasMaxLength(100);

                    b.Property<string>("PISSN")
                        .HasMaxLength(10);

                    b.Property<int>("PublisherId");

                    b.Property<string>("ReviewerCertificateBackgroundFile")
                        .HasMaxLength(100);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Visitors");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EiCId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("ARID.Models.JournalArticleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArticleTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("JournalId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleTypeId");

                    b.HasIndex("JournalId");

                    b.ToTable("JournalArticleTypes");
                });

            modelBuilder.Entity("ARID.Models.JournalFileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRequired");

                    b.Property<int>("JournalId");

                    b.HasKey("Id");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("JournalId");

                    b.ToTable("JournalFileTypes");
                });

            modelBuilder.Entity("ARID.Models.JournalIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cover")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(2500);

                    b.Property<bool>("IsOpen");

                    b.Property<bool>("IsPublished");

                    b.Property<int>("JournalId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Number");

                    b.Property<string>("Pdf")
                        .HasMaxLength(100);

                    b.Property<int>("PdfDownloadCounter");

                    b.Property<DateTime>("Releasedate");

                    b.Property<int>("Visitors");

                    b.Property<int>("VolumeId");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.HasIndex("VolumeId");

                    b.ToTable("JournalIssues");
                });

            modelBuilder.Entity("ARID.Models.JournalPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<bool>("Direction");

                    b.Property<int>("JournalId");

                    b.Property<DateTime>("Releasedate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.ToTable("JournalPages");
                });

            modelBuilder.Entity("ARID.Models.JournalReviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<int>("JournalId");

                    b.Property<string>("ReviewerUserId")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.HasIndex("ReviewerUserId");

                    b.ToTable("JournalReviewers");
                });

            modelBuilder.Entity("ARID.Models.JournalSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("JournalId");

                    b.Property<int>("SpecialityId");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("JournalSpecialities");
                });

            modelBuilder.Entity("ARID.Models.Manuscript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArAbstract")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("ArTitle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Areas")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CorrespondingAuthorId")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("CurrentStatus");

                    b.Property<DateTime>("DueDateforAuthorResponse");

                    b.Property<string>("EnAbstract")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("EnTitle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("FundingInfo")
                        .HasMaxLength(500);

                    b.Property<string>("GraphicalAbstract")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("JournalArticleTypeId");

                    b.Property<int>("JournalId");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("OpenAccess");

                    b.Property<string>("RunningTitle")
                        .HasMaxLength(500);

                    b.Property<int>("SpecialityId");

                    b.Property<int>("SubmittedforIssueId");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondingAuthorId");

                    b.HasIndex("JournalArticleTypeId");

                    b.HasIndex("JournalId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("SubmittedforIssueId");

                    b.ToTable("Manuscripts");
                });

            modelBuilder.Entity("ARID.Models.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DueDate");

                    b.Property<int>("MembershipType");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("ARID.Models.MessageReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Attachment")
                        .HasMaxLength(50);

                    b.Property<string>("Content")
                        .HasMaxLength(5000);

                    b.Property<DateTime>("DateOfRead");

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRead");

                    b.Property<bool>("IsReported");

                    b.Property<int>("MessageId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageReplies");
                });

            modelBuilder.Entity("ARID.Models.MOOCList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("Certificate");

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(250);

                    b.Property<string>("Instructor")
                        .HasMaxLength(100);

                    b.Property<bool>("IsFree");

                    b.Property<bool>("IsReported");

                    b.Property<int>("Language");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("MOOCProviderId");

                    b.Property<int>("SpecialityId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Tags")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UniversityId");

                    b.Property<string>("YouTubeLink")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MOOCProviderId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("UniversityId");

                    b.ToTable("MOOCLists");
                });

            modelBuilder.Entity("ARID.Models.MOOCProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Fb")
                        .HasMaxLength(100);

                    b.Property<string>("Logo")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Twitter")
                        .HasMaxLength(100);

                    b.Property<string>("Website")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("MOOCProviders");
                });

            modelBuilder.Entity("ARID.Models.MOOCProviderFollower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("MOOCProviderId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MOOCProviderId");

                    b.ToTable("MOOCProviderFollowers");
                });

            modelBuilder.Entity("ARID.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Content")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRead");

                    b.Property<DateTime>("ReadDate");

                    b.Property<string>("SenderId")
                        .HasMaxLength(450);

                    b.Property<string>("Url")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ARID.Models.PositionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArPositionName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EnPositionName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsApproved");

                    b.HasKey("Id");

                    b.ToTable("PositionTypes");
                });

            modelBuilder.Entity("ARID.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<int>("CommunityId");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("File")
                        .HasMaxLength(100);

                    b.Property<int>("GiftType");

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsCommentsAllowed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsGifted");

                    b.Property<bool>("IsHidden");

                    b.Property<bool>("IsPublishRequest");

                    b.Property<int>("PostType");

                    b.Property<bool>("PublishRequestStatus");

                    b.Property<int>("Reads");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CommunityId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ARID.Models.PostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("File")
                        .HasMaxLength(100);

                    b.Property<bool>("IsBestAnswer");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsHidden");

                    b.Property<Guid>("PostId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PostId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("ARID.Models.PostMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("DateTime");

                    b.Property<bool>("NotifyMe");

                    b.Property<Guid>("PostId");

                    b.Property<int>("ReportType");

                    b.Property<int>("VoteValue");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PostId");

                    b.ToTable("PostMetrics");
                });

            modelBuilder.Entity("ARID.Models.PostRevision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<DateTime>("EditorDateTime");

                    b.Property<string>("EditorUserId")
                        .HasMaxLength(450);

                    b.Property<Guid>("PostId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("EditorUserId");

                    b.HasIndex("PostId");

                    b.ToTable("PostRevisions");
                });

            modelBuilder.Entity("ARID.Models.ProfileLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessType");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("ProfileType");

                    b.Property<string>("ProfileUrl")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ProfileLinks");
                });

            modelBuilder.Entity("ARID.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ArDescription")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ArDetails")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("ArProjectName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("CountryId");

                    b.Property<string>("EnDescription")
                        .HasMaxLength(500);

                    b.Property<string>("EnDetails")
                        .HasMaxLength(5000);

                    b.Property<string>("EnProjectName")
                        .HasMaxLength(100);

                    b.Property<DateTime>("FromYear");

                    b.Property<int>("ProjectState");

                    b.Property<DateTime>("ToYear");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CountryId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ARID.Models.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ArAbstract")
                        .HasMaxLength(4000);

                    b.Property<string>("ArAuthors")
                        .HasMaxLength(500);

                    b.Property<string>("ArTitle")
                        .HasMaxLength(500);

                    b.Property<string>("DOI")
                        .HasMaxLength(50);

                    b.Property<int>("DownloadHits");

                    b.Property<string>("EnAbstract")
                        .HasMaxLength(4000);

                    b.Property<string>("EnAuthors")
                        .HasMaxLength(500);

                    b.Property<string>("EnTitle")
                        .HasMaxLength(500);

                    b.Property<string>("ExternalLink")
                        .HasMaxLength(500);

                    b.Property<string>("FileLink")
                        .HasMaxLength(500);

                    b.Property<string>("ISSN")
                        .HasMaxLength(10);

                    b.Property<int?>("IssueNo");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Pages")
                        .HasMaxLength(10);

                    b.Property<DateTime>("PublicationDate");

                    b.Property<int>("PublicationType");

                    b.Property<string>("Publisher")
                        .HasMaxLength(300);

                    b.Property<int?>("VolumeNo");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("ARID.Models.PublicationTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("ArDescription")
                        .HasMaxLength(5000);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ContactUs")
                        .HasMaxLength(500);

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<string>("EISSN")
                        .HasMaxLength(10);

                    b.Property<string>("EditorinChief")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("EstablishmentDate");

                    b.Property<string>("Fb")
                        .HasMaxLength(500);

                    b.Property<bool>("IsAdminAccepted");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsIIndexed");

                    b.Property<bool>("IsImpactFactor");

                    b.Property<bool>("IsScopusIndexed");

                    b.Property<bool>("IsVisible");

                    b.Property<string>("Languages")
                        .HasMaxLength(100);

                    b.Property<string>("Logo")
                        .HasMaxLength(250);

                    b.Property<string>("PISSN")
                        .HasMaxLength(10);

                    b.Property<int>("PublicationTypes");

                    b.Property<int>("PublisherId");

                    b.Property<int>("ReportType");

                    b.Property<int>("SpecialityId");

                    b.Property<bool>("Status");

                    b.Property<string>("Tags")
                        .HasMaxLength(100);

                    b.Property<string>("Twitter")
                        .HasMaxLength(500);

                    b.Property<string>("Website")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CountryId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("PublicationTitles");
                });

            modelBuilder.Entity("ARID.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ContactUs")
                        .HasMaxLength(500);

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("EstablishmentDate");

                    b.Property<string>("Fb")
                        .HasMaxLength(500);

                    b.Property<bool>("IsAdminAccepted");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsVisible");

                    b.Property<string>("Languages")
                        .HasMaxLength(100);

                    b.Property<string>("Logo")
                        .HasMaxLength(250);

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(100);

                    b.Property<int>("ReportType");

                    b.Property<int>("SpecialityId");

                    b.Property<bool>("Status");

                    b.Property<string>("Tags")
                        .HasMaxLength(100);

                    b.Property<string>("Twitter")
                        .HasMaxLength(500);

                    b.Property<string>("Website")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CountryId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("ARID.Models.RegistrationForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<int>("EmailContentId");

                    b.Property<int>("EmailContentReminderId");

                    b.Property<DateTime>("EventDate");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<string>("InvitationContext")
                        .HasMaxLength(2000);

                    b.Property<string>("InvitationFooter")
                        .HasMaxLength(50);

                    b.Property<string>("InvitationHeader")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsEntBadgeRequired");

                    b.Property<bool>("IsPdfInvitation");

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<int>("ReminderDays");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EmailContentId");

                    b.HasIndex("EmailContentReminderId");

                    b.ToTable("RegistrationForms");
                });

            modelBuilder.Entity("ARID.Models.ScientificEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("AridPrivileges")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EventDate");

                    b.Property<string>("EventNameAr")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EventNameEn")
                        .HasMaxLength(200);

                    b.Property<int>("EventType");

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDecisionMaker");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsVisible");

                    b.Property<string>("Organizers")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("ReportType");

                    b.Property<int>("SpecialityId");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Website")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CountryId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("ScientificEvents");
                });

            modelBuilder.Entity("ARID.Models.ScoreLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("PostId");

                    b.Property<int>("ScoreValueId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PostId");

                    b.HasIndex("ScoreValueId");

                    b.ToTable("ScoreLogs");
                });

            modelBuilder.Entity("ARID.Models.ScoreValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.ToTable("ScoreValues");
                });

            modelBuilder.Entity("ARID.Models.Sender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EnDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Senders");
                });

            modelBuilder.Entity("ARID.Models.SentEmailRecords", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("EmailContentId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EmailContentId");

                    b.ToTable("SentEmailRecords");
                });

            modelBuilder.Entity("ARID.Models.SideAd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action")
                        .HasMaxLength(50);

                    b.Property<int>("AdsPositionType");

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Controller")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description")
                        .HasMaxLength(450);

                    b.Property<string>("ExternalLink")
                        .HasMaxLength(200);

                    b.Property<int>("Hits");

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<int>("Indx");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("TargetType");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("SideAds");
                });

            modelBuilder.Entity("ARID.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SkillCategoryType");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("ARID.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EnSpecialityName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("ARID.Models.Statement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<int>("BalanceType");

                    b.Property<bool>("Destination");

                    b.Property<string>("Details")
                        .HasMaxLength(450);

                    b.Property<DateTime>("RecordDate");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("ARID.Models.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AEDecision");

                    b.Property<DateTime?>("AEDecisionDate");

                    b.Property<string>("AEDecisionText")
                        .HasMaxLength(1000);

                    b.Property<int?>("AEId");

                    b.Property<string>("CoverLetter")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("DateOfSubmission");

                    b.Property<DateTime?>("DecisionDate");

                    b.Property<string>("DecisionLetter");

                    b.Property<bool>("DuplicateSubmissionConfirmation");

                    b.Property<int>("EICDecision");

                    b.Property<string>("EicDecisionText")
                        .HasMaxLength(1000);

                    b.Property<int>("ManuscriptId");

                    b.Property<bool>("PlagiarismConfirmation");

                    b.Property<int?>("ResponsetoDecision");

                    b.Property<int>("SubmissionStatus");

                    b.HasKey("Id");

                    b.HasIndex("AEId");

                    b.HasIndex("ManuscriptId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("ARID.Models.SubmissionFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("JournalFileTypeId");

                    b.Property<int>("SubmissionId");

                    b.HasKey("Id");

                    b.HasIndex("JournalFileTypeId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("SubmissionFiles");
                });

            modelBuilder.Entity("ARID.Models.SubmissionReviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AbstractCompatibility");

                    b.Property<string>("Adjustments")
                        .HasMaxLength(5000);

                    b.Property<string>("CieAeUserId")
                        .HasMaxLength(450);

                    b.Property<DateTime>("DateOfRecord");

                    b.Property<DateTime>("DateRevisionCertificae");

                    b.Property<DateTime>("DecisionDate");

                    b.Property<DateTime>("DueDate");

                    b.Property<string>("EICInstructions")
                        .HasMaxLength(2000);

                    b.Property<int>("Evaluation");

                    b.Property<bool>("IsAccess");

                    b.Property<bool>("IsCertificateOfReviewingGranted");

                    b.Property<int>("IsCommitted");

                    b.Property<bool>("IsDiscussionDocumentedJustified");

                    b.Property<bool>("IsFormsAccepted");

                    b.Property<bool>("IsInterpretedResult");

                    b.Property<int>("IsMatchTitleContent");

                    b.Property<int>("IsModernSourcesAdopted");

                    b.Property<bool>("IsNewInfo");

                    b.Property<bool>("IsPublishedPreviously");

                    b.Property<bool>("IsRepeatedInfo");

                    b.Property<bool>("IsValuable");

                    b.Property<bool>("IsWithinJournalScope");

                    b.Property<int>("Method");

                    b.Property<string>("NotForPublicationReason")
                        .HasMaxLength(1000);

                    b.Property<string>("PublishLocation")
                        .HasMaxLength(5000);

                    b.Property<int>("RecommendationToPublish");

                    b.Property<int>("ResearchLength");

                    b.Property<DateTime>("ReviewDate");

                    b.Property<string>("ReviewReportFile")
                        .HasMaxLength(500);

                    b.Property<int>("ReviewerDecisionToReview");

                    b.Property<string>("ReviewerInstructionsToAuthor")
                        .HasMaxLength(5000);

                    b.Property<string>("ReviewerInstructionsToEIC")
                        .HasMaxLength(2000);

                    b.Property<int>("ReviewerStatus");

                    b.Property<string>("ReviewerUserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("SubmissionId");

                    b.Property<int>("TheoreticalResults");

                    b.HasKey("Id");

                    b.HasIndex("CieAeUserId");

                    b.HasIndex("ReviewerUserId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("SubmissionReviewers");
                });

            modelBuilder.Entity("ARID.Models.SuggestedReviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanReviewArabic");

                    b.Property<bool>("CanReviewEnglish");

                    b.Property<int>("ManuscriptId");

                    b.Property<string>("ReasonForSuggesion")
                        .HasMaxLength(450);

                    b.Property<string>("ReviewerUserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("SuggestionStatus");

                    b.HasKey("Id");

                    b.HasIndex("ManuscriptId");

                    b.HasIndex("ReviewerUserId");

                    b.ToTable("SuggestedReviewers");
                });

            modelBuilder.Entity("ARID.Models.TeachingExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ArDescription")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ArTitle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("EnDescription")
                        .HasMaxLength(500);

                    b.Property<string>("EnTitle")
                        .HasMaxLength(200);

                    b.Property<DateTime>("FromYear");

                    b.Property<int>("Indx");

                    b.Property<bool>("IsCurrent");

                    b.Property<DateTime?>("ToYear");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("TeachingExperiences");
                });

            modelBuilder.Entity("ARID.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("TicketCategoryId");

                    b.Property<DateTime>("TicketCloseDate");

                    b.Property<DateTime>("TicketOpenDate");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TicketCategoryId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("ARID.Models.TicketCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("NotifyEmail")
                        .HasMaxLength(50);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("TicketCategory");
                });

            modelBuilder.Entity("ARID.Models.TicketReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("ReplyDate");

                    b.Property<string>("SupportUserId")
                        .HasMaxLength(450);

                    b.Property<int>("TicketId");

                    b.HasKey("Id");

                    b.HasIndex("SupportUserId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketReplies");
                });

            modelBuilder.Entity("ARID.Models.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArUniversityName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("CountryId");

                    b.Property<string>("EnUniversityName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Governmental");

                    b.Property<bool>("IsIndexed");

                    b.Property<string>("LogoHD")
                        .HasMaxLength(500);

                    b.Property<bool>("Private");

                    b.Property<bool>("SemiPrivate");

                    b.Property<int>("StaffNo");

                    b.Property<int>("StudentNo");

                    b.Property<string>("Website")
                        .HasMaxLength(100);

                    b.Property<int>("YearofEstablishment");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("ARID.Models.UserBadge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BadgeId");

                    b.Property<DateTime?>("DateofGrant");

                    b.Property<DateTime>("DateofRequest");

                    b.Property<bool>("IsGranted");

                    b.Property<bool>("IsRejected");

                    b.Property<bool>("IsVisible");

                    b.Property<byte>("RejectCount");

                    b.Property<string>("RejectReason")
                        .HasMaxLength(2000);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBadges");
                });

            modelBuilder.Entity("ARID.Models.UserExpertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("ExpertiseId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ExpertiseId");

                    b.ToTable("UserExpertises");
                });

            modelBuilder.Entity("ARID.Models.UserExpressInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("RegistrationFormId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RegistrationFormId");

                    b.ToTable("UserExpressInterests");
                });

            modelBuilder.Entity("ARID.Models.UserSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("SkillId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("ARID.Models.VipDeclaration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeclarationBody")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("DeclarationDate");

                    b.Property<string>("DeclarationOccasion")
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("VipDeclarations");
                });

            modelBuilder.Entity("ARID.Models.Volume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsPublished");

                    b.Property<int>("JournalId");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<string>("Year")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.ToTable("Volumes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ARID.Messages.Models.Message", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "FromApplicationUser")
                        .WithMany()
                        .HasForeignKey("FromApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.ApplicationUser", "ToApplicationUser")
                        .WithMany()
                        .HasForeignKey("ToApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.AcademicActivity", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.AcademicPosition", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.PositionType", "PositionType")
                        .WithMany()
                        .HasForeignKey("PositionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Address", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.ApplicationUser", b =>
                {
                    b.HasOne("ARID.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.ApplicationUser", "ReferredBy")
                        .WithMany()
                        .HasForeignKey("ReferredById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.AreaEditor", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.ArticleAuthorship", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "AuthorUser")
                        .WithMany()
                        .HasForeignKey("AuthorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Manuscript", "Manuscript")
                        .WithMany()
                        .HasForeignKey("ManuscriptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Badge", b =>
                {
                    b.HasOne("ARID.Models.EmailContent", "EmailContent")
                        .WithMany()
                        .HasForeignKey("EmailContentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.ChapterStudyStatus", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.CourseChapterContent", "CourseChapterContent")
                        .WithMany()
                        .HasForeignKey("CourseChapterContentId1")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.City", b =>
                {
                    b.HasOne("ARID.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.CommentMetric", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.PostComment", "PostComment")
                        .WithMany()
                        .HasForeignKey("PostCommentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Committee", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.CommitteeAchievement", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.CommitteeProfile", "CommitteeProfile")
                        .WithMany()
                        .HasForeignKey("CommitteeProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.CommitteeProfile", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Committee", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Community", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.CommunityFollower", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Course", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.CourseChapter", b =>
                {
                    b.HasOne("ARID.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.CourseChapterChoice", b =>
                {
                    b.HasOne("ARID.Models.CourseChapterExam", "CourseChapterExam")
                        .WithMany()
                        .HasForeignKey("CourseChapterExamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.CourseChapterContent", b =>
                {
                    b.HasOne("ARID.Models.CourseChapter", "CourseChapter")
                        .WithMany()
                        .HasForeignKey("CourseChapterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.CourseChapterExam", b =>
                {
                    b.HasOne("ARID.Models.CourseChapter", "CourseChapter")
                        .WithMany()
                        .HasForeignKey("CourseChapterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.CourseChapterExamLog", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.CourseChapterChoice", "CourseChapterChoice")
                        .WithMany()
                        .HasForeignKey("CourseChapterChoiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.CourseInstructor", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.CourseRegisteration", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.CourseSponsor", b =>
                {
                    b.HasOne("ARID.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.EducationalLevel", b =>
                {
                    b.HasOne("ARID.Models.AcademicDegree", "AcademicDegree")
                        .WithMany()
                        .HasForeignKey("AcademicDegreeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.EmailContent", b =>
                {
                    b.HasOne("ARID.Models.Sender", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Expertise", b =>
                {
                    b.HasOne("ARID.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Faculty", b =>
                {
                    b.HasOne("ARID.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Filspay", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Follow", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "FollowedUser")
                        .WithMany()
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.FreelancerComment", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.FreelancerProject", "FreelancerProject")
                        .WithMany()
                        .HasForeignKey("FreelancerProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.FreelancerPortfolio", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.FreelancerProject", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.FreelancerProposal", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.FreelancerProject", "FreelancerProject")
                        .WithMany()
                        .HasForeignKey("FreelancerProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.ApplicationUser", "ReportedByUser")
                        .WithMany()
                        .HasForeignKey("ReportedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.FreelancerRating", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.FreelancerProject", "FreelancerProject")
                        .WithMany()
                        .HasForeignKey("FreelancerProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.FreelancerReadyService", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.FreelancerReadyServiceExtension", b =>
                {
                    b.HasOne("ARID.Models.FreelancerReadyService", "FreelancerReadyService")
                        .WithMany()
                        .HasForeignKey("FreelancerReadyServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.FreelancerRecruiter", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.FreelancerProject", "FreelancerProject")
                        .WithMany()
                        .HasForeignKey("FreelancerProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.FreelancerSkillVerification", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.ApplicationUser", "VerifiedByUser")
                        .WithMany()
                        .HasForeignKey("VerifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Gallary", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Journal", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.ApplicationUser", "EiC")
                        .WithMany()
                        .HasForeignKey("EiCId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.JournalArticleType", b =>
                {
                    b.HasOne("ARID.Models.ArticleType", "ArticleType")
                        .WithMany()
                        .HasForeignKey("ArticleTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.JournalFileType", b =>
                {
                    b.HasOne("ARID.Models.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.JournalIssue", b =>
                {
                    b.HasOne("ARID.Models.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Volume", "Volume")
                        .WithMany()
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.JournalPage", b =>
                {
                    b.HasOne("ARID.Models.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.JournalReviewer", b =>
                {
                    b.HasOne("ARID.Models.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.ApplicationUser", "ReviewerUser")
                        .WithMany()
                        .HasForeignKey("ReviewerUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.JournalSpeciality", b =>
                {
                    b.HasOne("ARID.Models.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Manuscript", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "CorrespondingAuthor")
                        .WithMany()
                        .HasForeignKey("CorrespondingAuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.JournalArticleType", "JournalArticleType")
                        .WithMany()
                        .HasForeignKey("JournalArticleTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.JournalIssue", "SubmittedforIssue")
                        .WithMany()
                        .HasForeignKey("SubmittedforIssueId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Membership", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.MessageReply", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Messages.Models.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.MOOCList", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.MOOCProvider", "MOOCProvider")
                        .WithMany()
                        .HasForeignKey("MOOCProviderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.MOOCProvider", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.MOOCProviderFollower", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.MOOCProvider", "MOOCProvider")
                        .WithMany()
                        .HasForeignKey("MOOCProviderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Notification", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Post", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.PostComment", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.PostMetric", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.PostRevision", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "EditorUser")
                        .WithMany()
                        .HasForeignKey("EditorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.ProfileLink", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Project", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Publication", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.PublicationTitle", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Publisher", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.RegistrationForm", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.EmailContent", "EmailContent")
                        .WithMany()
                        .HasForeignKey("EmailContentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.EmailContent", "EmailContentReminder")
                        .WithMany()
                        .HasForeignKey("EmailContentReminderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.ScientificEvent", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.ScoreLog", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.ScoreValue", "ScoreValue")
                        .WithMany()
                        .HasForeignKey("ScoreValueId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.SentEmailRecords", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.EmailContent", "EmailContent")
                        .WithMany()
                        .HasForeignKey("EmailContentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.SideAd", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Skill", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Statement", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Submission", b =>
                {
                    b.HasOne("ARID.Models.AreaEditor", "AE")
                        .WithMany()
                        .HasForeignKey("AEId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Manuscript", "Manuscript")
                        .WithMany()
                        .HasForeignKey("ManuscriptId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.SubmissionFile", b =>
                {
                    b.HasOne("ARID.Models.JournalFileType", "JournalFileType")
                        .WithMany()
                        .HasForeignKey("JournalFileTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Submission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.SubmissionReviewer", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "CieAeUser")
                        .WithMany()
                        .HasForeignKey("CieAeUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.ApplicationUser", "ReviewerUser")
                        .WithMany()
                        .HasForeignKey("ReviewerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Submission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.SuggestedReviewer", b =>
                {
                    b.HasOne("ARID.Models.Manuscript", "Manuscript")
                        .WithMany()
                        .HasForeignKey("ManuscriptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.ApplicationUser", "ReviewerUser")
                        .WithMany()
                        .HasForeignKey("ReviewerUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.TeachingExperience", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Ticket", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.TicketCategory", "TicketCategory")
                        .WithMany()
                        .HasForeignKey("TicketCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.TicketReply", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "SupportUser")
                        .WithMany()
                        .HasForeignKey("SupportUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.University", b =>
                {
                    b.HasOne("ARID.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.UserBadge", b =>
                {
                    b.HasOne("ARID.Models.Badge", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.UserExpertise", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Expertise", "Expertise")
                        .WithMany()
                        .HasForeignKey("ExpertiseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.UserExpressInterest", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.RegistrationForm", "RegistrationForm")
                        .WithMany()
                        .HasForeignKey("RegistrationFormId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.UserSkill", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ARID.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.VipDeclaration", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ARID.Models.Volume", b =>
                {
                    b.HasOne("ARID.Models.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARID.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ARID.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
